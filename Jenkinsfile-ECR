@Library('my-shared-library') _

pipeline {

    agent any

    parameters{
        choice(name: 'action', choices: 'Create\nDelete', description: 'Choose Create/Destroy')
        string(name: 'RepoName', defaultValue: 'myjava-app', description: 'Make sure the given Image Repo is already created')
        string(name: 'aws_account_id', defaultValue: '460472097832', description: 'AWS AccountID')
        string(name: 'region', defaultValue: 'ap-southeast-1', description: 'AWS region')
    }

    // environment {
    //     aws_account_id = '944820253794'
    //     region = 'ap-southeast-1'
    // }

    stages {
        stage("Unit Test maven") {
          when { expression { params.action == 'Create' } }    
            steps {
                script{
                    mvnTest()
                }
            }
        }  
        stage("Static Code Analysis: SonarQube") {
          when { expression { params.action == 'Create' } }     
            steps {
                script{
                    def SonarQubeCreds = 'sonar-api'
                    StaticCodeAnalysis(SonarQubeCreds)
                }
            }
        }
        stage("Sonar Quality Gate Check") {
          when { expression { params.action == 'Create' } }     
            steps {
                script{
                    def SonarQubeCreds = 'sonar-api'
                    SonarQualityGate(SonarQubeCreds)
                }
            }
        }
        stage("Maven Build") {
          when { expression { params.action == 'Create' } }     
            steps {
                script{
                    mvnBuild()
                }
            }
        }
        stage("Docker Image Build: ECR") {
          when { expression { params.action == 'Create' } }     
            steps {
                script{
                    def dockerImageTag = env.BUILD_NUMBER
                    BuildDocker("${params.aws_account_id}", "${params.RepoName}", dockerImageTag, "${params.region}")
                }
            }
        }
        stage("Docker Image Scan: Trivy") {
          when { expression { params.action == 'Create' } }
            steps {
                script{
                    def dockerImageTag = env.BUILD_NUMBER
                    DockerImageScan("${params.aws_account_id}", "${params.RepoName}", dockerImageTag, "${params.region}")
                }
            }
        }
        stage('Check if ECR Repository Exists') {
          environment {
            AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
            AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
          }  
          steps {
            script {
                def repoExists = false
                    // Check if the ECR repository already exists
                try {
                    sh """
                      aws ecr describe-repositories --repository-names ${params.RepoName}
                    """
                    repoExists = true
                } catch (Exception ex) {
                    // Repository doesn't exist, do nothing
                    repoExists = false
                }

                if (repoExists) {
                    echo "ECR repository '${params.RepoName}' already exists."
                } else {
                    sh """
                    echo "Creating ECR repository '${params.RepoName}'"
                    aws ecr create-repository --repository-name ${params.RepoName}
                    """
                }
                }
            }
        }   
        stage("Docker Image Push: ECR") {
          when { expression { params.action == 'Create' } }
            steps {
                script{
                    def dockerImageTag = env.BUILD_NUMBER
                    DockerImagePush("${params.aws_account_id}", "${params.RepoName}", dockerImageTag, "${params.region}")
                }
            }
        }
        stage("Docker Image Cleanup") {
          when { expression { params.action == 'Create' } }  
            steps {
                script{
                    def dockerImageTag = env.BUILD_NUMBER
                    DockerImageCleanup("${params.aws_account_id}", "${params.RepoName}", dockerImageTag, "${params.region}")
                }
            }
        }
    }    
}
